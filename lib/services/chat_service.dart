import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/chat.dart';

class ChatService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  // –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ß–ê–¢–ê
  static Future<void> createTestChat() async {
    try {
      final userId = _auth.currentUser!.uid;
      final timestamp = DateTime.now().millisecondsSinceEpoch;

      final chatRef = _firestore.collection('chats').doc();

      // –§–ò–ö–°: –£–ù–ò–ö–ê–õ–¨–ù–û–ï –ò–ú–Ø –ò –ü–†–ê–í–ò–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
      final chatData = {
        'name': '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç $timestamp',
        'participants': [userId],
        'lastMessage': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'lastMessageStatus': 'read',
        'lastMessageTime': Timestamp.now(),
        'createdAt': Timestamp.now(), // –í–ê–ñ–ù–û: –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      };

      print('üîÑ –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: $chatData');

      await chatRef.set(chatData);

      // –§–ò–ö–°: –°–û–ó–î–ê–ï–ú –ü–ï–†–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï
      await _firestore
          .collection('chats')
          .doc(chatRef.id)
          .collection('messages')
          .add({
        'text': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'senderId': userId,
        'timestamp': Timestamp.now(),
        'status': 'read',
        'type': 'text',
      });

      print('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${chatRef.id}');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞: $e');
      rethrow;
    }
  }

  // –§–ò–ö–°: –ó–ê–ì–†–£–ó–ö–ê –ß–ê–¢–û–í –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–û–†–¢–ò–†–û–í–ö–û–ô
  static Future<List<Chat>> getUserChats() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) {
        print('‚ùå getUserChats: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return [];
      }

      print('üîÑ getUserChats: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —á–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');

      final querySnapshot = await _firestore
          .collection('chats')
          .where('participants', arrayContains: userId)
          .orderBy('createdAt', descending: true) // –§–ò–ö–°: –∏—Å–ø–æ–ª—å–∑—É–µ–º createdAt
          .get();

      print('‚úÖ getUserChats: –ø–æ–ª—É—á–µ–Ω–æ ${querySnapshot.docs.length} —á–∞—Ç–æ–≤');

      // –î–ï–ë–ê–ì: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
      for (final doc in querySnapshot.docs) {
        final data = doc.data();
        print(
            'üì® –ß–∞—Ç: ${doc.id} | ${data['name']} | participants: ${data['participants']}');
      }

      final chats = querySnapshot.docs.map((doc) {
        final data = doc.data();
        return Chat(
          id: doc.id,
          name: data['name'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          participants: List<String>.from(data['participants'] ?? []),
          lastMessage: data['lastMessage'] ?? '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π',
          lastMessageStatus: data['lastMessageStatus'] ?? 'sent',
          lastMessageTime: (data['lastMessageTime'] as Timestamp?)?.toDate() ??
              DateTime.now(),
        );
      }).toList();

      return chats;
    } catch (e) {
      print('‚ùå getUserChats error: $e');
      return [];
    }
  }

  // –§–ò–ö–°: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ß–ê–¢–û–í (–¥–ª—è –¥–µ–±–∞–≥–∞)
  static Future<void> debugChats() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) return;

      final allChats = await _firestore.collection('chats').get();
      print('üîç DEBUG: –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ: ${allChats.docs.length}');

      for (final doc in allChats.docs) {
        final data = doc.data();
        final participants = List<String>.from(data['participants'] ?? []);
        print(
            'üîç –ß–∞—Ç: ${data['name']} | participants: $participants | contains $userId: ${participants.contains(userId)}');
      }
    } catch (e) {
      print('‚ùå DEBUG error: $e');
    }
  }
}
