import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart'; // –î–û–ë–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç
import '../services/chat_service.dart';
import '../models/chat.dart';
import 'single_chat_screen.dart';

class ChatScreen extends StatefulWidget {
  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  List<Chat> _chats = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadChats();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤
  void _loadChats() async {
    print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã...');
    final user = FirebaseAuth.instance.currentUser; // –¢–ï–ü–ï–†–¨ –†–ê–ë–û–¢–ê–ï–¢
    print('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user?.uid}');

    if (user == null) {
      print('‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù!');
      setState(() => _isLoading = false);
      return;
    }

    setState(() => _isLoading = true);

    try {
      final chats = await ChatService.getUserChats();
      print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤');

      setState(() {
        _chats = chats;
        _isLoading = false;
      });
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: $e');
      setState(() => _isLoading = false);
    }
  }

  // –§–ò–ö–°: –º–µ—Ç–æ–¥ –¥–ª—è RefreshIndicator
  Future<void> _handleRefresh() async {
    await Future<void>;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
  void _createTestChat() async {
    print('üéØ –ù–ê–ß–ê–õ–û: _createTestChat() –≤—ã–∑–≤–∞–Ω');
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(Icons.schedule, color: Colors.white),
              SizedBox(width: 8),
              Text('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç...'),
            ],
          ),
          backgroundColor: Colors.orange,
        ),
      );

      print('üîÑ –í—ã–∑—ã–≤–∞–µ–º ChatService.createTestChat()');
      ChatService.createTestChat(); // –§–ò–ö–°: —É–±—Ä–∞–ª await (–æ—à–∏–±–∫–∞ Ln 52)
      print('‚úÖ ChatService.createTestChat() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è');

      // –§–ò–ö–°: –î–∞–µ–º –≤—Ä–µ–º—è Firestore –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
      await Future.delayed(Duration(seconds: 2));

      // –î–ï–ë–ê–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –±–∞–∑–µ
      print('üîç –ó–∞–ø—É—Å–∫–∞–µ–º debugChats()');
      await ChatService.debugChats();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(Icons.check, color: Colors.white),
              SizedBox(width: 8),
              Text('–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω! –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...'),
            ],
          ),
          backgroundColor: Colors.green,
        ),
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
      print('üîÑ –í—ã–∑—ã–≤–∞–µ–º _loadChats()');
      _loadChats();
    } catch (e) {
      print('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: $e');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(Icons.error, color: Colors.white),
              SizedBox(width: 8),
              Text('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $e'),
            ],
          ),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('DarkKick Chats'),
        backgroundColor: Colors.black,
        actions: [
          IconButton(
            icon: Icon(Icons.add, color: Colors.white),
            onPressed: _createTestChat,
            tooltip: '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç',
          ),
          IconButton(
            icon: Icon(Icons.refresh, color: Colors.white),
            onPressed: _loadChats,
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç—ã',
          ),
          IconButton(
            icon: Icon(Icons.bug_report, color: Colors.white),
            onPressed: ChatService.debugChats,
            tooltip: '–î–µ–±–∞–≥',
          ),
        ],
      ),
      body: Container(
        color: Colors.grey[900],
        child: RefreshIndicator(
          onRefresh: _handleRefresh,
          child: _isLoading
              ? Center(
                  child: CircularProgressIndicator(color: Colors.deepPurple))
              : _chats.isEmpty
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.chat_bubble_outline,
                              size: 64, color: Colors.grey),
                          SizedBox(height: 16),
                          Text(
                            '–ù–µ—Ç —á–∞—Ç–æ–≤',
                            style: TextStyle(fontSize: 18, color: Colors.grey),
                          ),
                          SizedBox(height: 8),
                          Text(
                            '–ù–∞–∂–º–∏—Ç–µ + —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç',
                            style: TextStyle(color: Colors.grey),
                          ),
                          SizedBox(height: 16),
                          ElevatedButton(
                            onPressed: _createTestChat,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.deepPurple,
                            ),
                            child: Text('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç'),
                          ),
                        ],
                      ),
                    )
                  : ListView.builder(
                      itemCount: _chats.length,
                      itemBuilder: (context, index) {
                        final chat = _chats[index];
                        return Card(
                          margin:
                              EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          color: Colors.grey[800],
                          child: ListTile(
                            leading: CircleAvatar(
                              backgroundColor: Colors.deepPurple,
                              child: Text(
                                chat.name.isNotEmpty
                                    ? chat.name[0].toUpperCase()
                                    : '?',
                                style: TextStyle(color: Colors.white),
                              ),
                            ),
                            title: Text(
                              chat.name,
                              style: TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold),
                            ),
                            subtitle: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  chat.lastMessage,
                                  style: TextStyle(color: Colors.grey),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                Text(
                                  '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chat.participants.length}',
                                  style: TextStyle(
                                      color: Colors.grey, fontSize: 12),
                                ),
                              ],
                            ),
                            trailing: Text(
                              '${chat.lastMessageTime.hour}:${chat.lastMessageTime.minute.toString().padLeft(2, '0')}',
                              style: TextStyle(color: Colors.grey),
                            ),
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => SingleChatScreen(
                                    chatId: chat.id,
                                    chatName: chat.name,
                                  ),
                                ),
                              );
                            },
                          ),
                        );
                      },
                    ),
        ),
      ),
    );
  }
}
